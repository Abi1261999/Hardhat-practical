{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Georgia-Bold;\f1\fnil\fcharset0 Georgia;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red24\green24\blue24;\red193\green193\blue193;
\red183\green111\blue179;\red70\green137\blue204;\red67\green192\blue160;\red202\green202\blue202;\red194\green126\blue101;
\red167\green197\blue152;\red212\green214\blue154;\red140\green211\blue254;}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c12157\c12157\c12157;\cssrgb\c80000\c80000\c80000;
\cssrgb\c77255\c52549\c75294;\cssrgb\c33725\c61176\c83922;\cssrgb\c30588\c78824\c69020;\cssrgb\c83137\c83137\c83137;\cssrgb\c80784\c56863\c47059;
\cssrgb\c70980\c80784\c65882;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh14960\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf0 \expnd0\expndtw0\kerning0
2) Write a Smart Contract and demonstrate the steps\uc0\u8232 involved in the process of compilation using Hardhat\u8232 Development Environment?\
\
Ans)\
\

\f1\b0 Compiling smart contracts:
\f0\b \

\f1\b0 To compile the smart contract run the code 
\f0\b $ npx hardhat compile
\f1\b0 . The two contract Lock.sol and token.sol will be complied\

\f0\b \
\
Contract \
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs24 \cf2 \cb3 \outl0\strokewidth0 \strokec2 //SPDX-License-Identifier: MIT\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 //solidity files has to start with this pragma\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // This is used by solidity complier to validate its version\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 pragma\cf4 \strokec4  \cf6 \strokec6 solidity\cf4 \strokec4  ^0.8.19;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // This is main bulding block for smart contract.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 contract\cf7 \strokec7  Token\cf4 \strokec4 \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf7 \strokec7 string\cf4 \strokec4  \cf6 \strokec6 public\cf4 \strokec4  name \cf8 \strokec8 =\cf4 \strokec4  \cf9 \strokec9 "My Hardhat Token"\cf4 \strokec4 ;\cb1 \
\cb3     \cf7 \strokec7 string\cf4 \strokec4  \cf6 \strokec6 public\cf4 \strokec4  symbol\cf8 \strokec8 =\cf4 \strokec4  \cf9 \strokec9 "MHT"\cf4 \strokec4 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // amount of token stored in an unsigned int type var\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf7 \strokec7 uint256\cf4 \strokec4  \cf6 \strokec6 public\cf4 \strokec4  totalsupply \cf8 \strokec8 =\cf4 \strokec4  \cf10 \strokec10 1000000\cf4 \strokec4 ;\cb1 \
\
\
\cb3     \cf2 \strokec2 // Address type to store etherum accounts.\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 address\cf4 \strokec4  \cf6 \strokec6 public\cf4 \strokec4  owner;\cb1 \
\
\cb3     \cf2 \strokec2 // mapping is a key/value amap. Here we store account balance\cf4 \cb1 \strokec4 \
\
\
\cb3     \cf6 \strokec6 mapping\cf4 \strokec4 (\cf7 \strokec7 address\cf8 \strokec8 =>\cf4 \strokec4  \cf7 \strokec7 uint256\cf4 \strokec4 )balances;\cb1 \
\
\
\cb3     \cf2 \strokec2 // transfer help of chain application unserstand what happens within your contarct\cf4 \cb1 \strokec4 \
\cb3     even \cf11 \strokec11 transfer\cf4 \strokec4 (\cf7 \strokec7 address\cf4 \strokec4  \cf6 \strokec6 indexed\cf4 \strokec4  _from, \cf7 \strokec7 address\cf4 \strokec4  \cf6 \strokec6 indexed\cf4 \strokec4  _to, \cf7 \strokec7 uint256\cf4 \strokec4  _value);\cb1 \
\
\cb3     \cf6 \strokec6 constructor\cf4 \strokec4 ()\{\cb1 \
\
\cb3         balance[\cf6 \strokec6 msg.sender\cf4 \strokec4 ] \cf8 \strokec8 =\cf4 \strokec4  totalsupply;\cb1 \
\cb3         owner \cf8 \strokec8 =\cf4 \strokec4  \cf6 \strokec6 msg.sender\cf4 \strokec4 ;\cb1 \
\
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 // funtion to transfer a token \cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 // The external modifier make a function " only" collable form "outside" the conyyract\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 function\cf4 \strokec4  \cf11 \strokec11 transfer\cf4 \strokec4 (\cf7 \strokec7 address\cf4 \strokec4  \cf12 \strokec12 to\cf4 \strokec4 , \cf12 \strokec12 unit256\cf4 \strokec4  \cf12 \strokec12 amount\cf4 \strokec4 ) \cf6 \strokec6 external\cf4 \strokec4  \{\cb1 \
\
\cb3         \cf2 \strokec2 // check if the transaction sender has enough tokens.\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // If requires first argumnet evalutes to false then the transcation will revevert\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 require\cf4 \strokec4  (balances[\cf6 \strokec6 msg.sender\cf4 \strokec4 ] \cf8 \strokec8 >=\cf4 \strokec4  amount, \cf9 \strokec9 "Not Enough token"\cf4 \strokec4 );\cb1 \
\
\cb3         \cf2 \strokec2 // Transfer the amount\cf4 \cb1 \strokec4 \
\cb3         balances[\cf6 \strokec6 msg.sender\cf4 \strokec4 ] \cf8 \strokec8 -=\cf4 \strokec4  amount;\cb1 \
\cb3         balances[to] \cf8 \strokec8 +=\cf4 \strokec4  amount;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Notify off chain application of the transfer\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         \cf5 \strokec5 emit\cf4 \strokec4  \cf11 \strokec11 transfer\cf4 \strokec4 (\cf6 \strokec6 msg.sender\cf4 \strokec4 , to , amount);\cb1 \
\cb3     \}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // Read only function to retrive the token balance of a given amount \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //The view modifier indicates that it doesn't modify the contracts\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // state which aalos us to call it without executing a transaction\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     funtion \cf11 \strokec11 balanceof\cf4 \strokec4 (\cf7 \strokec7 address\cf4 \strokec4  account) \cf6 \strokec6 external\cf4 \strokec4  \cf6 \strokec6 view\cf4 \strokec4  \cf5 \strokec5 returns\cf4 \strokec4  (\cf7 \strokec7 uint256\cf4 \strokec4 )\{\cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  balances[acount];\cb1 \
\
\cb3     \}\cb1 \
\cb3  \cb1 \
\cb3 \}\cb1 \
}